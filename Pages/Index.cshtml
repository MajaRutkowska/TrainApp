@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<body class="start-page">
    <div class="main">
        <div class="content @((User.Identity.IsAuthenticated) ? "authenticated" : "unauthenticated")">
            
            @if (User.IsInRole("Admin"))
            {
                <div class="text">
                    <h2>Witaj w panelu zarządzania szkółką</h2>
                    <p>
                        Twórz drużyny, przypisuj trenerów, zarządzaj kalendarzem i kontroluj wszystkie działania w szkółce. Zorganizuj pracę na najwyższym poziomie!
                    </p>
                </div>
                <div class="picture-div">
                    <img class="picture" src="~/images/index_logo2.png" />
                </div>
            }
            else if (User.IsInRole("Coach"))
            {
                <div class="text">
                    <h2>Witaj w centrum zarządzania drużyną!</h2>
                    <p>
                      Planowanie treningów i monitorowanie postępów zawodników <br /> w jednym miejscu. 
                    </p>
                </div>
                <div class="picture-div">
                    <img class="picture" src="~/images/index_logo2.png" />
                </div>
            }
            else if (User.IsInRole("Player"))
            {
                <div class="text">
                    <h2>Witaj w centrum treningowym!</h2>
                    <p>
                        Sprawdzaj nadchodzące wydarzenia i realizuj przypisane zadania. Twoja droga do sukcesu zaczyna się tutaj!
                    </p>
                </div>
                <div class="picture-div">
                    <img class="picture" src="~/images/index_logo2.png" />
                </div>
            }
            else
            {
                <div class="text">
                    <h2>Zarządzaj swoją szkółką  łatwo <br /> i efektywnie</h2>
                    <p>
                        Twórz druzyny, planuj treningi, przypisuj zadania i monitoruj ich wykonanie. Trenerzy z łatwością mogą organizować treningi, a zawodnicy mają dostęp do kalendarza z nadchodzącymi wydarzeniami oraz listy zadań do wykonania. Wszysto co potrzebne do usprawnienia funkcjonowania swojej szkółki w jednym miejscu
                    </p>
                    <a href="Identity/Account/Register" class="buttonR">Zarejestruj się teraz</a>
                </div>
                <div class="picture-div">
                    <img class="picture" src="~/images/index_logo2.png" />
                </div>
            }
        </div>
    </div>

    @if(User.IsInRole("Coach") || User.IsInRole("Player"))
    {
        @if (Model.NearestEventTime.HasValue)
        {
            <div class="countdown-container">
                <h3>Nadchodzące wydarzenie:</h3>
                <p><strong>@Model.NearestEventTitle</strong></p>
                <p>Czas do wydarzenia: <span id="countdown"></span></p>
            </div>
        }
        else
        {
            <div class="countdown-container">
                <h3>Brak nadchodzących wydarzeń.</h3>
            </div>
        }
    }

    @if (User.IsInRole("Coach"))
    {
        <div class="calendar-container">
            <script>
                document.addEventListener('DOMContentLoaded', function () {

                    var trainingsRaw = @Html.Raw(Json.Serialize(ViewData["Trainings"]));
                    var trainings = trainingsRaw.$values || [];

                    var calendarEl = document.getElementById('calendar')
                    var calendar = new FullCalendar.Calendar(calendarEl, {
                        locale: 'pl',
                        firstDay: 1,
                        initialView: 'dayGridMonth',
                        headerToolbar: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth,timeGridWeek,timeGridDay'
                        },
                        buttonText: {
                        today: 'Dziś',
                        month: 'Miesiąc',
                        week: 'Tydzień',
                        day: 'Dzień'
                    },
                        events: trainings.map(training => ({
                            title: training.title,
                            start: training.start,
                            end: training.end,
                            color: training.color 
                        })),
                        eventClick: function (info) {

                            if (confirm('Czy na pewno chcesz usunąć ten trening?')) {

                                var trainingId = info.event.id;

                                fetch('/Index?handler=DeleteTraining', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                    },
                                    body: JSON.stringify({ id: trainingId })
                                })
                                    .then(response => response.json())
                                    .then(data => {
                                        if (data.success) {
                                            alert('Trening został usunięty');
                                            info.event.remove(); 
                                        } else {
                                            alert('Wystąpił błąd: ' + data.message);
                                        }
                                    })
                                    .catch(error => {
                                        console.error('Błąd:', error);
                                    });
                            }
                        }
                    });
                    calendar.render()
                });
            </script>

            <div id="calendar"></div>
        </div>
        
            <div class="main">
            <h3>Dodaj nowe wydarzenie</h3>
            <form method="post">
                <div class="form-group">
                    <label for="title">Tytuł treningu:</label>
                    <input type="text" name="Title" id="title" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="date">Data treningu:</label>
                    <input type="datetime-local" name="Date" id="date" class="form-control" required />
                </div>
                <div class="form-group">
                    <label for="teamId">Wybierz drużynę:</label>
                    <select name="TeamId" id="teamId" class="form-control" required>
                        @foreach (var team in Model.Teams)
                        {
                            <option value="@team.TeamId">@team.TeamName</option>
                        }
                    </select>
                </div>
                <div class="form-group">
                    <label for="color">Wybierz kolor wydarzenia:</label>
                    <input type="color" name="Color" id="color" class="form-control" />
                </div>
                <button type="submit" class="btn btn-primary">Dodaj trening</button>
            </form>
            </div>
            }
    else if (User.IsInRole("Player"))
    {
        <div class="calendar-container">
            <script>
                document.addEventListener('DOMContentLoaded', function () {

                    var trainingsRaw = @Html.Raw(Json.Serialize(ViewData["Trainings"]));
                    var trainings = trainingsRaw.$values || [];

                    var calendarEl = document.getElementById('calendar');
                    var calendar = new FullCalendar.Calendar(calendarEl, {
                        locale: 'pl',
                        firstDay: 1,
                        initialView: 'dayGridMonth',
                        headerToolbar: {
                            left: 'prev,next today',
                            center: 'title',
                            right: 'dayGridMonth,timeGridWeek,timeGridDay'
                        },
                        buttonText:{
                        today: 'Dziś',
                        month: 'Miesiąc',
                        week: 'Tydzień',
                        day: 'Dzień'
                    },
                        events: trainings.map(training => ({
                            title: training.title,
                            start: training.start,
                            end: training.end,
                            color: training.color 
                        }))
                    });
                    calendar.render();
                });
            </script>

            <div id="calendar"></div>
        </div>
    }
</body>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var nearestEventTime = new Date("@Model.NearestEventTime?.ToString("yyyy-MM-ddTHH:mm:ss")");

        function updateCountdown() {
            var now = new Date();
            var timeDifference = nearestEventTime - now;

            if (timeDifference > 0) {
                var days = Math.floor(timeDifference / (1000 * 60 * 60 * 24));
                var hours = Math.floor((timeDifference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                var minutes = Math.floor((timeDifference % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((timeDifference % (1000 * 60)) / 1000);

                document.getElementById('countdown').innerText =
                    `${days} dni ${hours} godz. ${minutes} min. ${seconds} sek.`;
            } else {
                document.getElementById('countdown').innerText = "Wydarzenie już trwa lub minęło!";
            }
        }

        setInterval(updateCountdown, 1000); // Aktualizuj co sekundę
        updateCountdown(); // Uruchom od razu
    });
</script>
